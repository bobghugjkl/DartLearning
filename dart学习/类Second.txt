/*
static关键字来实现类级别的变量和函数
静态方法不可以访问非静态成员，非静态成员可以访问静态成员,即不可以通过new来访问而是直接通过类名称来访问
静态方法定义时已经在内存中，调用完成后不会马上释放，但作用域只会在类中
*/

// class Person {
//   static String name = "张三";
//   int age = 20;
//   static void show() {
//     print(name); //可以访问静态属性和静态方法，在main中直接用类名.函数名来调用,但是无法访问非静态的方法和成员
//   }

//   void printInfo() {
//     print(name); //访问静态属性
//     print(this.age); //访问非静态属性
//     show(); //访问静态方法
//   }
// }
// main() {
//   Person p = new Person(); //必须实例化才可以调用函数
//   p.printInfo();
//   print(Person.name);
//   Person.show();
//   // Person p; //只是建立了一个空对象，直接使用会报错
//   // p ?.printInfo();//这样就可以避免出错
// }

/*
对象运算符：
  ？条件运算符
  as 类型转换
  is 类型判断
  .. 级联操作（连缀）
*/
class Person {
  String name = "斋藤飞鸟";
  int age;
  Person(this.name, this.age);
  Person.xxx(this.name, this.age); //命名函数
  void printInfo() {
    print("${this.name}---${this.age}");
  }
}

class Web extends Person {
  //也可以给父类的命名构造函数传参
  String sex = " ";
  //必须要初始化！！！
  // Web(String name, int age, String sex) : super(name, age) {
  //   this.sex = sex;
  // } //也需要有个构造函数进行传参(给父类传参)
  Web(String name, int age, String sex) : super.xxx(name, age) {
    //只能写一个，但是可以给命名函数传参
    this.sex = sex;
  }
  run() {
    //定义自己的
    print("${this.name}---${this.age}---${this.sex}");
    super.printInfo(); //调用父类的
    this.printInfo(); //调用本类的
  }

  @override
  void printInfo() {
    // TODO: implement printInfo
    print("这是复写方法");
  }
}

main() {
  Person p = new Person("张三", 12); //必须实例化才可以调用函数
  if (p is Person) {
    p.name = "Tom";
  }
  p.printInfo();
  print(p is Object);

  var p1;
  p1 = " ";
  p1 = new Person("李四", 30);
  (p1 as Person).printInfo(); //这样就是这个对象了

  p1
    ..name = "王五"
    ..age = 30
    ..printInfo();

  Web web = new Web("西野七濑", 17, "女");
  web.printInfo();
}
